<?php
namespace Retailinsights\ConfigProducts\Helper;

class Data extends \Magento\Framework\App\Helper\AbstractHelper
{
    /**
     * @var \Magento\Framework\ObjectManagerInterface
     */
    protected $_objectManager;
    protected $_resource;
    protected $_product;
    protected $_productTypeInstance;
    protected $_imageHelper;

    const PURITY_TITLE = 'purity';
    const RINGS_TITLE = 'ring_sizes';
    const DIAMOND_TITLE = 'diamond_quality';
    const PURITY_ATTR = 'purity';
    const RINGS_ATTR = 'ringsize';
    const DIAMOND_ATTR = 'diamond_quality';

    /**
     * @param \Magento\Framework\App\Helper\Context $context
     * @param \Magento\Framework\ObjectManagerInterface
     */
    public function __construct(\Magento\Framework\App\Helper\Context $context, 
      \Magento\Framework\ObjectManagerInterface $objectManager, 
      \Magento\Framework\App\ResourceConnection $resource,
      \Magento\Catalog\Model\Product $product,
      \Magento\ConfigurableProduct\Model\Product\Type\Configurable $productTypeInstance,
      \Magento\Catalog\Helper\Image $imageHelper
    )
    {

        $this->_objectManager = $objectManager;
        $this->_resource = $resource;
        $this->_product = $product;
        $this->_productTypeInstance = $productTypeInstance;
        $this->_imageHelper = $imageHelper;
        parent::__construct($context);
    }

    public function getCustomPrice($id, $sku, $ringsize, $purity, $diamond_quality)
    {
        $result = array();
        if($diamond_quality !="0") { 
      $diamond_quality_values = explode("-", $diamond_quality, 2);
      $diamond_color = $diamond_quality_values[0];
      $diamond_qual = $diamond_quality_values[1];
    } else {
      $diamond_color = "0";
      $diamond_qual = "0";
    }
    
        $connection = $this
            ->_resource
            ->getConnection(\Magento\Framework\App\ResourceConnection::DEFAULT_CONNECTION);
        $customProductTable = $connection->getTableName('custom_config_products');
        $sql = "SELECT * FROM " . $customProductTable . " WHERE sku = ? AND size = ? AND purity = ? AND diamond_color = ? AND diamond_quality = ?";
        $product_values = $connection->fetchAll($sql, [$sku, $ringsize, $purity, $diamond_color, $diamond_qual]);

        $count = count($product_values);
        if ($count)
        {
            $product_values = reset($product_values);
            $price_values = $this->getCustomPriceOnly($product_values['id']);
            $result['status'] = 'success';
            $result['response'] = array_merge($product_values, $price_values);
        }
        else
        {
            $result['status'] = 'error';
            $result['message'] = 'The product does not exist or was not provided';
        }
        return $result;
    }

    public function getCustomPriceOnly($id)
    {
        $connection = $this
            ->_resource
            ->getConnection(\Magento\Framework\App\ResourceConnection::DEFAULT_CONNECTION);
        $customProductPriceTable = $connection->getTableName('custom_config_products_price');
        $sql = "SELECT * FROM " . $customProductPriceTable . " WHERE id = ?";
        $product_values = $connection->fetchAll($sql, [$id]);
        return reset($product_values);
    }

    public function getStrReplaceWithHyphen($value) {
return str_replace(' ','_', strtolower($value));
    }

    public function getProductColorImages($product_id) {

   $productcoll = $this->_product->load($product_id);
   $result = array();
  $color_value = $productcoll->getResource()->getAttribute('color')->getFrontend()->getValue($productcoll);

$imageUrl = $this->_imageHelper->init($productcoll, 'product_page_image_small')
                ->setImageFile($productcoll->getSmallImage()) // image,small_image,thumbnail
                ->resize(240)
                ->getUrl();
            $result = array($color_value,$imageUrl);
            
        return $result;        
  // $productcoll->getData('no_of_days');       

   $productAttributeOptions = $this->_productTypeInstance->getConfigurableAttributesAsArray($productcoll);

foreach ($productAttributeOptions as $key => $value) {
    $tmp_option = $value['values'];
    if(count($tmp_option) > 0)
    {
        foreach ($tmp_option as $tmp) 
        {
            echo "<option value='".$key."_".$tmp['value_index']."'>".$tmp['label']."</option>";
        }
    }
}

    }
           public function isColorAttr($product_id) {
   $productcoll = $this->_product->load($product_id);
  $result=false;      
  $productAttributeOptions = $this->_productTypeInstance->getConfigurableAttributesAsArray($productcoll);
foreach ($productAttributeOptions as $key => $value) {
    $tmp_option = $value['values'];
     if($value['attribute_code'] == "color") {
         $result = true;
     }
}
return $result;
    }
}

